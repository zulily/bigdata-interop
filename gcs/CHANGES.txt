1.3.1 - 2014-12-16

  1. Fixed a rare NullPointerException in FileSystemBackedDirectoryListCache
     which can occur if a directory being listed is purged from the cache
     between a call to "exists()" and "listFiles()".
  2. Fixed a bug in GoogleHadoopFileSystemCacheCleaner where cache-cleaner
     fails to clean any contents when a bucket is non-empty but expired.
  3. Fixed a bug in FileSystemBackedDirectoryListCache which caused garbage
     collection to require several passes for large directory hierarchies;
     now we can successfully garbage-collect an entire expired tree in a
     single pass, and cache files are also processed in-place without having
     to create a complete in-memory list.
  4. Updated handling of new file creation, file copying, and file deletion
     so that all object modification requests sent to GCS contain preconditions
     that should prevent race-conditions in the face of retried operations.


1.3.0 - 2014-10-17

  1. Directory timestamp updating can now be controlled via user-settable
     properties "fs.gs.parent.timestamp.update.enable",
     "fs.gs.parent.timestamp.update.substrings.excludes". and
     "fs.gs.parent.timestamp.update.substrings.includes" in core-site.xml. By
     default, timestamp updating is enabled for the YARN done and intermediate
     done directories and excluded for everything else. Strings listed in
     includes take precedence over excludes.
  2. Directory timestamp updating will now occur on a background thread inside
     GoogleCloudStorageFileSystem.
  3. Attempting to acquire an OAuth access token will be now be retried when
     using .p12 or installed application (JWT) credentials if there is a
     recoverable error such as an HTTP 5XX response code or an IOException.
  4. Added FileSystemBackedDirectoryListCache, extracting a common interface
     for it to share with the (InMemory)DirectoryListCache; instead of using
     an in-memory HashMap to enforce only same-process list consistency, the
     FileSystemBacked version mirrors GCS objects as empty files on a local
     FileSystem, which may itself be an NFS mount for cluster-wide or even
     potentially cross-cluster consistency groups. This allows a cluster to
     be configured with a "consistent view", making it safe to use GCS as the
     DEFAULT_FS for arbitrary multi-stage or even multi-platform workloads.
     This is now enabled by default for machine-wide consistency, but it is
     strongly recommended to configure clusters with an NFS directory for
     cluster-wide strong consistency. Relevant configuration settings:
     fs.gs.metadata.cache.enable [default: true]
     fs.gs.metadata.cache.type [IN_MEMORY (default) | FILESYSTEM_BACKED]
     fs.gs.metadata.cache.directory [default: /tmp/gcs_connector_metadata_cache]
  5. Optimized seeks in GoogleHadoopFSDataInputStream which fit within
     the pre-fetched memory buffer by simply repositioning the buffer in-place
     instead of delegating to the underlying channel at all.
  6. Fixed a performance-hindering bug in globStatus where "foo/bar/*" would
     flat-list "foo/bar" instead of "foo/bar/"; causing the "candidate matches"
     to include things like "foo/bar1" and "foo/bar1/baz", even though the
     results themselves would be correct due to filtering out the proper glob
     client-side in the end.
  7. The versions of java API clients were updated to 1.19 derived versions.


1.2.9 - 2014-09-18

  1. When directory contents are updated e.g., files or directories are added,
     removed, or renamed the GCS connector will now attempt to update a
     metadata property on the parent directory with a modification time. The
     modification time recorded will be used as the modification time in
     subsequent FileSystem#getStatus(...), FileSystem#listStatus and
     FileSystem#globStatus(...) calls and is the time as reported by
     the system clock of the system that made the modification.


1.2.8 - 2014-08-07

  1. Changed the manner in which the GCS connector jar is built to A) reduce
     included dependencies to only those parts which are used and B) repackaged
     dependencies whose versions conflict with those bundled with Hadoop.
  2. Deprecated fs.gs.system.bucket config.


1.2.7 - 2014-06-23

  1. Fixed a bug where certain globs incorrectly reported the parent directory
     being not found (and thus erroring out) in Hadoop 2.2.0 due to an
     interaction with the fs.gs.glob.flatlist.enable feature; doesn't affect
     Hadoop 1.2.1 or 2.4.0.


1.2.6 - 2014-06-05

  1. When running in hadoop 0.23+ (hadoop 2+), listStatus will now throw a
     FileNotFoundException when a non-existent path is passed in.
  2. The GCS connector now uses the v1 JSON API when accessing Google
     Cloud Storage.
  3. The GoogleHadoopFileSystem now treats the parent of the root path as if
     it is the root path. This behavior mimics the POSIX behavior of "/.."
     being the same as "/".
  4. When creating a new file, a zero-length marker file will be created
     before the FSDataOutputStream is returned in create(). This allows for
     early detection of overwrite conflicts that may occur and prevents
     certain race conditions that could be encountered when relying on
     a single exists() check.
  5. The dependencies on cglib and asm were removed from the GCS connector
     and the classes for these are no longer included in the JAR.


1.2.5 - 2014-05-08

  1. Fixed a bug where fs.gs.auth.client.file was unconditionally being
     overwritten by a default value.
  2. Enabled direct upload for directory creation to save one round-trip call.
  3. Added wiring for GoogleHadoopFileSystem.close() to call through to close()
     its underlying helper classes as well.
  4. Added a new batch mode for creating directories in parallel which requires
     manually parallelizing in the client. Speeds up nested directory creation
     and repairing large numbers of implicit directories in listStatus.
  5. Eliminated redundant API calls in listStatus, speeding it up by ~half.
  6. Fixed a bug where globStatus didn't correctly handle globs containing '?'.
  7. Implemented new version of globStatus which initially performs a flat
     listing before performing the recursive glob logic in-memory to
     dramatically speed up globs with lots of directories; the new behavior is
     default, but can disabled by setting fs.gs.glob.flatlist.enable = false.


1.2.4 - 2014-04-09

  1. The value of fs.gs.io.buffersize.write is now rounded up to 8MB if set to
     a lower value, otherwise the backend will error out on unaligned chunks.
  2. Misc refactoring to enable reuse of the resumable upload classes in other
     libraries.


1.2.3 - 2014-03-21

  1. Fixed a bug where renaming a directory could cause the file contents to get
     shuffled between files when the fully-qualified file paths have different
     lengths. Does not apply to renames on files directly, such as when using
     a glob expression inside a flat directory.
  2. Changed the behavior of batch request API calls such that they are retried
     on failure in the same manner as non-batch requests.
  3. Eliminated an unnecessary dependency on com/google/protobuf which could
     cause version-incompatibility issues with Apache Shark.


1.2.2 - 2014-02-12

  1. Fixed a bug where filenames with '+' were unreadable due to premature
     URL-decoding.
  2. Modified a check to allow fs.gs.io.buffersize.write to be a non-multiple
     of 8MB, just printing out a warning instead of check-failing.
  3. Added some debug-level logging of exceptions before throwing in cases
     where Hadoop tends to swallows the exception along with its useful info.


1.2.1 - 2014-01-23

  1. Added CHANGES.txt for release notes.
  2. Fixed a bug where accidental URI decoding make it impossible to use
     pre-escaped filenames, e.g. foo%3Abar. This is necessary for Pig to work.
  3. Fixed a bug where an IOException was thrown when trying to read a
     zero-byte file. Necessary for Pig to work.


1.2.0 - 2014-01-14

  1. Preview release of GCS connector.

